template <> class fmt::formatter<uenv::scalar> {
  public:
    // parse format specification and store it:
    constexpr auto parse(format_parse_context& ctx) {
        return ctx.end();
    }
    // format a value using stored specification:
    template <typename FmtContext>
    constexpr auto format(uenv::scalar const& s, FmtContext& ctx) const {
        return fmt::format_to(ctx.out(), "{}={}", s.name, s.value);
    }
};

template <> class fmt::formatter<uenv::update_kind> {
  public:
    // parse format specification and store it:
    constexpr auto parse(format_parse_context& ctx) {
        return ctx.end();
    }
    // format a value using stored specification:
    template <typename FmtContext>
    constexpr auto format(uenv::update_kind const& k, FmtContext& ctx) const {
        return fmt::format_to(ctx.out(), "{}",
                              (k == uenv::update_kind::prepend  ? "prepend"
                               : k == uenv::update_kind::append ? "append"
                               : k == uenv::update_kind::set    ? "set"
                                                                : "unset"));
    }
};

template <> class fmt::formatter<uenv::prefix_path_update> {
  public:
    // parse format specification and store it:
    constexpr auto parse(format_parse_context& ctx) {
        return ctx.end();
    }
    // format a value using stored specification:
    template <typename FmtContext>
    constexpr auto format(uenv::prefix_path_update const& u,
                          FmtContext& ctx) const {
        auto ctx_ = fmt::format_to(ctx.out(), "{}: [", u.op);
        for (auto& p : u.values) {
            fmt::format_to(ctx_, "{},", p);
        }
        return fmt::format_to(ctx, "]");
    }
};

template <> class fmt::formatter<uenv::prefix_path> {
  public:
    // parse format specification and store it:
    constexpr auto parse(format_parse_context& ctx) {
        return ctx.end();
    }
    // format a value using stored specification:
    template <typename FmtContext>
    auto format(uenv::prefix_path const& p, FmtContext& ctx) const {
        return fmt::format_to(ctx.out(), "{}={}", p.name(),
                              p.get("$" + std::string(p.name())));
    }
};

template <> class fmt::formatter<uenv::envvarset> {
  public:
    // parse format specification and store it:
    constexpr auto parse(format_parse_context& ctx) {
        return ctx.end();
    }
    // format a value using stored specification:
    template <typename FmtContext>
    auto format(uenv::envvarset const& e, FmtContext& ctx) const {
        auto ctx_ = fmt::format_to(ctx.out(), "scalars:\n");
        for (auto s : e.scalars()) {
            ctx_ = fmt::format_to(ctx_, "  {}\n", s.second);
        }
        ctx_ = fmt::format_to(ctx_, "lists:\n");
        for (auto p : e.prefix_paths()) {
            ctx_ = fmt::format_to(ctx_, "  {}\n", p.second);
        }
        return ctx_;
    }
};
